CREATE TABLE Customers (
    customer_id INT PRIMARY KEY,
    first_name VARCHAR(100) NOT NULL,
    last_name VARCHAR(100) NOT NULL,
    email VARCHAR(100) UNIQUE NOT NULL,
    phone VARCHAR(20),
    address TEXT,
    join_date DATE
);
INSERT INTO Customers (customer_id, first_name, last_name, email, phone, address, join_date)
VALUES
(1, 'John', 'Doe', 'john.doe@example.com', '1234567890', '123 Elm St', '2023-01-10'),
(2, 'Jane', 'Smith', 'jane.smith@example.com', '9876543210', '456 Oak St', '2023-02-15'),
(3, 'Alice', 'Brown', 'alice.brown@example.com', '1112223333', '789 Pine St', '2023-03-20');

CREATE TABLE Products (
    product_id INT PRIMARY KEY,
    product_name VARCHAR(100) NOT NULL,
    category VARCHAR(50),
    price DECIMAL(10, 2) NOT NULL,
    stock_quantity INT NOT NULL
);
INSERT INTO Products (product_id, product_name, category, price, stock_quantity)
VALUES
(1, 'Laptop', 'Electronics', 750.00, 20),
(2, 'Smartphone', 'Electronics', 500.00, 50),
(3, 'Table', 'Furniture', 150.00, 10),
(4, 'Chair', 'Furniture', 100.00, 30),
(5, 'Headphones', 'Accessories', 50.00, 100);
CREATE TABLE Orders (
    order_id INT PRIMARY KEY,
    customer_id INT,
    order_date DATE NOT NULL,
    total_amount DECIMAL(10, 2),
    order_status VARCHAR(20),
    FOREIGN KEY (customer_id) REFERENCES Customers(customer_id)
);
INSERT INTO Orders (order_id, customer_id, order_date, total_amount, order_status)
VALUES
(1, 1, '2023-01-15', 750.00, 'Shipped'),
(2, 2, '2023-02-20', 500.00, 'Pending'),
(3, 3, '2023-03-25', 250.00, 'Completed'),
(4, 1, '2023-04-10', 300.00, 'Shipped');

CREATE TABLE OrderDetails (
    order_detail_id INT PRIMARY KEY,
    order_id INT,
    product_id INT,
    quantity INT NOT NULL,
    unit_price DECIMAL(10, 2) NOT NULL,
    FOREIGN KEY (order_id) REFERENCES Orders(order_id),
    FOREIGN KEY (product_id) REFERENCES Products(product_id)
);

INSERT INTO OrderDetails (order_detail_id, order_id, product_id, quantity, unit_price)
VALUES
(1, 1, 1, 1, 750.00),
(2, 2, 2, 1, 500.00),
(3, 3, 4, 2, 100.00),
(4, 4, 5, 3, 50.00);

CREATE TABLE Payments (
    payment_id INT PRIMARY KEY,
    order_id INT,
    payment_date DATE NOT NULL,
    payment_amount DECIMAL(10, 2),
    payment_method VARCHAR(20),
    FOREIGN KEY (order_id) REFERENCES Orders(order_id)
);

INSERT INTO Payments (payment_id, order_id, payment_date, payment_amount, payment_method)
VALUES
(1, 1, '2023-01-16', 750.00, 'Credit Card'),
(2, 2, '2023-02-21', 500.00, 'PayPal'),
(3, 3, '2023-03-26', 250.00, 'Cash'),
(4, 4, '2023-04-11', 150.00, 'Wallet');


-- query1
SELECT c.customer_id, c.first_name, c.last_name, COUNT(o.order_id) AS total_orders
FROM Customers AS c
LEFT JOIN Orders AS o ON c.customer_id = o.customer_id
GROUP BY c.customer_id, c.first_name, c.last_name;

-- query2
SELECT p.product_id, p.product_name, SUM(od.quantity * od.unit_price) AS total_revenue
FROM Products AS p
INNER JOIN OrderDetails AS od ON p.product_id = od.product_id
GROUP BY p.product_id, p.product_name;

-- query3
SELECT p.product_id, p.product_name, MAX(od.unit_price) AS highest_price_sold
FROM Products AS p
INNER JOIN OrderDetails AS od ON p.product_id = od.product_id
GROUP BY p.product_id, p.product_name
LIMIT 0, 1000;


-- query4
SELECT DISTINCT c.customer_id, c.first_name, c.last_name, c.email
FROM Customers AS c
INNER JOIN Orders AS o ON c.customer_id = o.customer_id
WHERE o.order_date >= CURDATE() - INTERVAL 30 DAY;

-- query5
SELECT c.customer_id, c.first_name, c.last_name, SUM(p.payment_amount) AS total_paid
FROM Customers AS c
INNER JOIN Orders AS o ON c.customer_id = o.customer_id
INNER JOIN Payments AS p ON o.order_id = p.order_id
GROUP BY c.customer_id, c.first_name, c.last_name;

-- query6
SELECT p.category, SUM(od.quantity) AS total_products_sold
FROM Products AS p
INNER JOIN OrderDetails AS od ON p.product_id = od.product_id
GROUP BY p.category;

-- query7
SELECT o.order_id, o.customer_id, o.order_date, o.total_amount
FROM Orders AS o
WHERE o.order_status = 'Pending';

-- query8
SELECT AVG(o.total_amount) AS average_order_value
FROM Orders AS o;

-- query9
SELECT c.customer_id, c.first_name, c.last_name, SUM(p.payment_amount) AS total_spent
FROM Customers AS c
INNER JOIN Orders AS o ON c.customer_id = o.customer_id
INNER JOIN Payments AS p ON o.order_id = p.order_id
GROUP BY c.customer_id, c.first_name, c.last_name
ORDER BY total_spent DESC
LIMIT 5;

-- query10
SELECT p.product_id, p.product_name
FROM Products AS p
LEFT JOIN OrderDetails AS od ON p.product_id = od.product_id
WHERE od.product_id IS NULL;

